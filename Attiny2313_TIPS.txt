Giuseppe Culotta - 28/03/2018


___Impostazione FUSE bits______________________________________    

1. Utilizzare AVR Calculator per ottenere la stringa corretta (http://www.engbedded.com/fusecalc)

    ESEMPI:
    
    Oscillatore interno 1MHZ           -U lfuse:w:0x64:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
    Quarzo esterno da 3 a 8MHZ         -U lfuse:w:0xfd:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m      

2. Impostare i FUSE Bits nell'Attiny2313:

   avrdude -c usbtiny -p t2313 -e -U lfuse:w:0xfd:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
   


___Creazione progetto Xcode__________________________________________    

1. Posizionarsi nella directory dove si deve creare il progetto

2. avr-project NOMEPROGETTO
                                                            


___Compilazione Xcode_________________________________________________   

1. Modificare le righe seguenti nel file Makefile (ATTENZIONE: la riga FUSES deve essere identica alle impostazioni di FUSE Bits dell'Attiny2313):
	
	DEVICE     = attiny2313
	CLOCK      = 4000000
	PROGRAMMER = -c usbtiny -p attiny2313
	OBJECTS    = main.o
	FUSES      = -U lfuse:w:0xFD:m -U hfuse:w:0xDF:m -U efuse:w:0xFF:m -U lock:w:0xFF:m

2. modificare il codice nel file main.c

3. effettuare build (Xcode)

__Atmel Studio (Windows)

1. Project->Properties->Toolchain->AVR/GNU C Compiler->Symbols: add F_CPU=2000000   //2MHZ 
2. Impostare USBTINY come external tool (https://www.programming-electronics-diy.xyz/2020/09/using-usbtinyisp-programmer-with-atmel.html)
                                                                   
___Flash________________________________________________________

1. Caricare il file .hex nel chip: 

   avrdude -c usbtiny -p t2313 -e -U flash:w:main.hex
